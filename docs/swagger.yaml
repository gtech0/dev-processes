basePath: /api
definitions:
  dto.PasswordDto:
    properties:
      newPassword:
        type: string
    type: object
  dto.RefreshTokenDto:
    properties:
      refreshToken:
        type: string
    type: object
  dto.StreamDto:
    properties:
      name:
        type: string
    type: object
  dto.UserDto:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  model.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  model.TokenPair:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8001
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: User API
  version: "0.01"
paths:
  /stream/create:
    post:
      description: create student stream
      parameters:
      - description: stream name
        in: body
        name: payload
        schema:
          $ref: '#/definitions/dto.StreamDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Bearer: []
      summary: Create student stream
      tags:
      - Stream
  /stream/get:
    get:
      description: get stream names sorted by creation date
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.StreamDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Bearer: []
      summary: Get stream names
      tags:
      - Stream
  /user/login:
    post:
      consumes:
      - application/json
      description: login in account
      parameters:
      - description: Auth data
        in: body
        name: payload
        schema:
          $ref: '#/definitions/dto.UserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Login
      tags:
      - User
  /user/logout:
    post:
      description: logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Bearer: []
      summary: Logout
      tags:
      - User
  /user/password:
    patch:
      consumes:
      - application/json
      description: change your password
      parameters:
      - description: New password
        in: body
        name: payload
        schema:
          $ref: '#/definitions/dto.PasswordDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - Bearer: []
      summary: Change password
      tags:
      - User
  /user/refresh:
    post:
      consumes:
      - application/json
      description: refresh token
      parameters:
      - description: Token
        in: body
        name: payload
        schema:
          $ref: '#/definitions/dto.RefreshTokenDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TokenPair'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Refresh
      tags:
      - User
  /user/signup:
    post:
      consumes:
      - application/json
      description: create admin account
      parameters:
      - description: Auth data
        in: body
        name: payload
        schema:
          $ref: '#/definitions/dto.UserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Create admin account
      tags:
      - User
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
